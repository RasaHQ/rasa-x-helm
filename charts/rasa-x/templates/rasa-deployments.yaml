{{- range .Values.rasa.versions }}
{{- if .enabled }}
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "{{ $.Release.Name }}-{{ .serviceName }}"
  labels:
    {{- include "rasa-x.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ .serviceName }}
  annotations:
    sidecar.jaegertracing.io/inject: "{{ $.Values.rasa.jaegerSidecar }}"
spec:
  progressDeadlineSeconds: {{ $.Values.global.progressDeadlineSeconds }}
  replicas: {{ default 1 .replicaCount }}
  selector:
    matchLabels:
      {{- include "rasa-x.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/component: {{ .serviceName }}
  template:
    metadata:
      labels:
        {{- include "rasa-x.selectorLabels" $ | nindent 8 }}
        app.kubernetes.io/component: {{ .serviceName }}
        {{- if $.Values.rasa.podLabels }}
{{ toYaml $.Values.rasa.podLabels | indent 8 }}
        {{- end }}
      annotations:
        checksum/rasa-config: {{ include (print $.Template.BasePath "/rasa-config-files-configmap.yaml") $ | sha256sum }}
        checksum/rasa-secret: {{ include (print $.Template.BasePath "/rasa-secret.yaml") $ | sha256sum }}
        {{- if $.Values.rasa.podAnnotations }}
{{ toYaml $.Values.rasa.podAnnotations | indent 8 }}
        {{- end }}
    spec:
      hostNetwork: {{ $.Values.hostNetwork }}
      dnsPolicy: {{ include "rasa-x.dnsPolicy" $ }}
      {{- if $.Values.dnsConfig }}
      dnsConfig:
{{ toYaml $.Values.dnsConfig | indent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ $.Values.rasa.automountServiceAccountToken }}
      {{ include "rasa-x.spec" $ }}
      {{- if .nodeSelector }}
      nodeSelector:
{{ toYaml .nodeSelector | indent 8 }}
      {{- end }}
      {{- if $.Values.rasa.tolerations }}
      tolerations:
{{ toYaml $.Values.rasa.tolerations | indent 6 }}
      {{- end }}
      
      containers:
      - name: {{ $.Chart.Name }}
        image: '{{ $.Values.rasa.name }}:{{ include "rasa.tag" $ }}'
        imagePullPolicy: {{ $.Values.images.pullPolicy }}
        ports:
        - name: "http"
          containerPort: {{ default 5005 $.Values.rasa.port }}
          protocol: "TCP"
        {{- if or $.Values.rasa.livenessProbe.enabled (not (hasKey $.Values.rasa.livenessProbe "enabled")) }}
        livenessProbe:
          httpGet:
            path: {{ $.Values.rasa.livenessProbe.path }}
            port: "http"
            scheme: {{ default "HTTP" $.Values.rasa.livenessProbe.scheme }}
          initialDelaySeconds: {{ $.Values.rasa.livenessProbe.initialProbeDelay }}
          failureThreshold: 10
        {{- end }}
        {{- if or $.Values.rasa.readinessProbe.enabled (not (hasKey $.Values.rasa.readinessProbe "enabled")) }}
        readinessProbe:
          httpGet:
            path: {{ $.Values.rasa.readinessProbe.path }}
            port: "http"
            scheme: {{ default "HTTP" $.Values.rasa.readinessProbe.scheme }}
          initialDelaySeconds: {{ $.Values.rasa.readinessProbe.initialProbeDelay }}
          failureThreshold: 10
        {{- end }}
        {{- if $.Values.rasa.command }}
        command:
          {{- toYaml $.Values.rasa.command | nindent 10 }}
        {{- end }}
        {{- if $.Values.rasa.args }}
        args:
          {{- toYaml $.Values.rasa.args | nindent 10 }}
        {{- else }}
        args:
        - x
        - --no-prompt
        - --production
        - --config-endpoint
        - {{ $.Values.rasax.scheme }}://{{ include "rasa-x.fullname" $ }}-rasa-x.{{ $.Release.Namespace }}.svc:{{ default 5002 $.Values.rasax.port }}/api/config?token=$(RASA_X_TOKEN)
        - --port
        - "{{ $.Values.rasa.port }}"
        - --jwt-method
        - HS256
        - --jwt-secret
        - "$(JWT_SECRET)"
        - --auth-token
        - "$(RASA_TOKEN)"
        - --cors
        - '*'
        {{- if $.Values.rasa.extraArgs }}
        {{- toYaml $.Values.rasa.extraArgs | nindent 8 }}
        {{- end }}
        {{ if $.Values.debugMode }}- --debug{{ end }}
        {{- end }}
        {{- with .resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        env:
        {{- if $.Values.rasa.disableTelemetry }}
        - name: "RASA_TELEMETRY_ENABLED"
          value: "false"
        {{- end }}
        - name: "MPLCONFIGDIR"
          value: "/tmp/.matplotlib"
        {{- if or $.Values.postgresql.install (and (not $.Values.postgresql.install) $.Values.postgresql.existingHost) }}
        - name: "DB_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.psql.password.secret" $ }}
              key: {{ template "rasa-x.psql.password.key" $ }}
        {{- end }}
        - name: "DB_DATABASE"
          value: {{ .trackerDatabase }}
        - name: "RASA_X_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.secret" $ }}
              key: "rasaXToken"
        - name: "RASA_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.secret" $ }}
              key: "rasaToken"
        - name: "JWT_SECRET"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.secret" $ }}
              key: "jwtSecret"
        {{- if $.Values.redis.install }}
        - name: "REDIS_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.redis.password.secret" $ }}
              key: {{ template "rasa-x.redis.password.key" $ }}
        {{- end }}
        {{- if $.Values.redis.external }}
        - name: "REDIS_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.redis.password.secret" $ }}
              key: {{ template "rasa-x.redis.password.key" $ }}
        {{- end }}
        {{- if $.Values.rabbitmq.enabled }}
        - name: "RABBITMQ_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ template "rasa-x.rabbitmq.password.secret" $ }}
              key: {{ template "rasa-x.rabbitmq.password.key" $ }}
        - name: "RABBITMQ_QUEUE"
          value: "{{ $.Values.rasa.rabbitQueue }}"
        {{- end }}
        - name: "RASA_ENVIRONMENT"
          value: "{{ .rasaEnvironment }}"
        - name: "RASA_MODEL_SERVER"
          value: {{ $.Values.rasax.scheme }}://{{ include "rasa-x.host" $ }}.{{ $.Release.Namespace }}.svc:{{ $.Values.rasax.port }}/api/models/tags/{{ .modelTag }}
        {{- if $.Values.duckling.enabled }}
        - name: "RASA_DUCKLING_HTTP_URL"
          value: {{ $.Values.duckling.scheme }}://{{ include "duckling.host" $ }}.{{ $.Release.Namespace }}.svc:{{ $.Values.duckling.port }}
        {{- end }}
        {{- include "rasa.extra.envs" $ | nindent 8 }}
        volumeMounts:
        # Mount the temporary directory for the Rasa global configuration
        - name: config-dir
          mountPath: /.config
{{- if $.Values.rasa.extraVolumeMounts }}
{{ toYaml $.Values.rasa.extraVolumeMounts | indent 8 }}
{{- end }}
{{- if .extraVolumeMounts }}
{{ toYaml .extraVolumeMounts | indent 8 }}
{{- end }}
      volumes:
      - name: config-dir
        emptyDir: {}
{{- if $.Values.rasa.extraVolumes }}
{{ toYaml $.Values.rasa.extraVolumes | indent 6 }}
{{- end }}
{{- if .extraVolumes }}
{{ toYaml .extraVolumes | indent 6 }}
{{- end }}
# this is needed to make it clear that these are two resources
---
{{- end }}
{{- end }}
